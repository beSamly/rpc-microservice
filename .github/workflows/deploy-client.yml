# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project and GKE_SA_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/GoogleCloudPlatform/github-actions/tree/master/example-workflows/gke

name: Update on client service

on:
  push:
    branches:
      - master
    paths:
      - "client/**"

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      # - name: Docker build
      #   run: cd client && docker build -t besamly2018/rpcmicro-client .
      # - name : Docker login
      #   run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      #   env:
      #     DOCKER_USERNAME: ${{secrets.DOCKER_USERNAME}}
      #     DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
      # - name: Docker image push
      #   run: docker push besamly2018/rpcmicro-client

      # Setup gcloud CLI
      - uses: actions-hub/gcloud@master
        env:
          PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
          APPLICATION_CREDENTIALS: ${{secrets.GOOGLE_APPLICATION_CREDENTIALS}}
      - name: echo secret variables
        run: |-
          echo ${{secrets.GCLOUD_PROJECT_ID}}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      # - run: |-
      #     gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - name: Get cluster context
        run: |-
          gcloud container clusters get-credentials ibct-microservices-cluster-1

      - name: Rollout deployment
        run: |-
          kubectl get pods
          kubectl rollout restart deployment hasura

#     # Build the Docker image
#     - name: Build
#       run: |-
#         docker build \
#           --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
#           --build-arg GITHUB_SHA="$GITHUB_SHA" \
#           --build-arg GITHUB_REF="$GITHUB_REF" \
#           .

#     # Push the Docker image to Google Container Registry
#     - name: Publish
#       run: |-
#         docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

#     # Set up kustomize
#     - name: Set up Kustomize
#       run: |-
#         curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
#         chmod u+x ./kustomize

#     # Deploy the Docker image to the GKE cluster
#     - name: Deploy
#       run: |-
#         ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
#         ./kustomize build . | kubectl apply -f -
#         kubectl rollout status deployment/$DEPLOYMENT_NAME
#         kubectl get services -o wide
